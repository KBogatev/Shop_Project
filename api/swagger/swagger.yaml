swagger: "2.0"
info:
  description: "This is a simple shop which accomplishes the basic CRUD functions between products and users."
  version: "1.0.0"
  title: "Shop API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "koko.bogatev@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "127.0.0.1:5000"
basePath: "/"
tags:
- name: "Products"
  description: "Operations regarding products."
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "Sales"
  description: "Access to Shop Sales"
- name: "Users"
  description: "Operations regarding the users"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "http"
- "https"
paths:
  /users:
    get:
      tags:
      - "Users"
      summary: "Returns currently registered users."
      description: ""
      operationId: "getUsers"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "string"
  /users/register:
    post:
      tags:
      - "Users"
      summary: "Register a new user to the shop."
      description: ""
      operationId: "register"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New user to be added."
        required: true
        schema:
          $ref: "#/definitions/Users"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Users"
        "400":
          description: "Invalid Input"
  /users/unsubscribe/{id}:
    delete:
      tags:
      - "Users"
      summary: "Delete user by user id"
      description: ""
      operationId: "DeleteUserByid"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the user that needs to be fetched."
        required: true
        type: "integer"
        
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Users"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "User not found"
  /users/update/{id}:
    put:
      tags:
      - "Users"
      summary: "Allows updating of the users information."
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/Users"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
  /items:
    get:
      tags:
      - "Products"
      summary: "Returns items currently in the shop."
      description: ""
      operationId: "getItems"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "string"
  /items/newitem:
    post:
      tags:
      - "Products"
      summary: "Create a new product"
      operationId: "createItem"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created item object"
        required: true
        schema:
          $ref: "#/definitions/Items"
      responses:
        default:
          description: "successful operation"
  /items/removeitem/{id}:
    delete:
      tags:
      - "Products"
      summary: "Delete product by product id"
      description: ""
      operationId: "DeleteProductByid"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the item that needs to be fetched."
        required: true
        type: "integer"
        
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Items"
        "400":
          description: "Invalid id supplied"
        "404":
          description: "User not found"
  /items/update/{id}:
    put:
      tags:
      - "Products"
      summary: "Allows updating of the users information."
      operationId: "updateItem"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/Items"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
  /items/buy:
    post:
      tags:
      - "Sales"
      summary: "Create a new product"
      operationId: "buyItem"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "new sale"
        description: "Created sale object"
        required: true
        schema:
          $ref: "#/definitions/Sales"
      responses:
        default:
          description: "successful operation"
  /userinfo/{user id}:
    get:
      tags:
      - "Users"
      summary: "Returns purchases of user provided."
      description: ""
      operationId: "Userinfo"
      produces:
      - "application/json"
      parameters:
        - name: "user id"
          in: "path"
          description: "The id of the user that needs to be fetched."
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "string"
  /iteminfo/{item id}:
    get:
      tags:
      - "Products"
      summary: "Returns users that have purchased the provided item."
      description: ""
      operationId: "Iteminfo"
      produces:
      - "application/json"
      parameters:
        - name: "item id"
          in: "path"
          description: "The id of the item that needs to be fetched."
          required: true
          type: "integer"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "string"
  /items/featured:
    get:
      tags:
      - "Products"
      summary: "Returns 5 most purchased items in the shop."
      description: ""
      operationId: "featuredItems"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "string"
  /salesinfo:
    post:
      tags:
      - "Sales"
      summary: "Returns sales for all products within a provided time frame"
      operationId: "Salesinfo"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "dates to be provided."
          required: true
          schema:
            $ref: "#/definitions/Dates"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "string"
definitions:
  Users:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      first name:
        type: "string"
      last name:
        type: "string"
    xml:
      name: "Users"
  Items:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      item name:
        type: "string"
      description:
        type: "string"
      sell state:
        type: "boolean"
    xml:
      name: "Items"
  Sales:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "Int64"
      user id:
        type: "integer"
        format: "int64"
      product id:
        type: "integer"
        format: "int64"
      sell date:
        type: "string"
        format: "date-time"
    xml:
      name: "Sales"
  Dates:
    type: "object"
    properties:
      start date:
        type: "string"
        format: "date"
      end date:
        type: "string"
        format: "date"
    xml:
      name: "Dates"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"